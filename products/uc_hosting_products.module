<?php
/**
 * @file
 *
 * Defines quota-based, site and platform based products
 */

/**
 * Implementation of hook_help
 */
function uc_hosting_products_help ($path, $arg) {
  switch ($path) {
    case 'admin/store/hosting':
      return '<p>' . t('This page lists all products for which a hosting feature has been enabled. To add products to this list, you must edit them, and add Aegir features under the features tab.') . '</p>';
      break;
  }
}

/**
 * Implementation of hook_menu
 */
function uc_hosting_products_menu () {
  $items = array();

  $items['admin/store/hosting'] = array( 
    'title' => t('Hosting'), 
    'description' => t('Settings for Aegir integration.'), 
    'page callback' => 'uc_hosting_products_admin', 
    'access arguments' => array('administer store'), 
    'type' => MENU_NORMAL_ITEM, 
    'file' => 'inc/uc_hosting_products.admin.inc' 
  ); 

  $items['admin/store/hosting/clear-errors'] = array(
    'title' => t('Clear Aegir product errors'),
    'description' => t('Clear all Aegir product related errors.'),
    'page callback' => 'uc_hosting_products_clear_errors',
    'access arguments' => array('administer store'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/uc_hosting_products.admin.inc'
  );

  $items['purchase/site'] = array(
    'title' => 'Create your site',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('uc_hosting_products_site_info_form'),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'inc/uc_hosting_products.pages.inc',
  );

  return $items;
}

/**
 * Declare our theme functions via hook_theme
 */
function uc_hosting_products_theme () {
  $functions = array();
  $functions['uc_hosting_products_site_info'] = array(
    'arguments' => array('element' => NULL),
  );
  return $functions;
}

/**
 * Implementation of hook_nodeapi().
 */
function uc_hosting_products_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'update':
      if ($node->type == 'site') {
        // Ensure that the site url stays in sync
        if ($node->hosting_name != $node->title) {
          // The url is changing, so update the uc_hosting_orders table
          db_query("UPDATE {uc_hosting_orders} SET site_url = '%s' WHERE site_url = '%s'", array($node->title, $node->hosting_name));
        }
      }
      break;
    case 'delete':
      if (_uc_hosting_products_has_feature($node)) {
        db_query('DELETE FROM {uc_hosting_products} WHERE model = "%s"', $node->model);
        db_query('DELETE FROM {uc_product_features} WHERE nid = %d', $node->nid);
      }
      break;
  }
}

/**
 * This is called in hosting_site when it rebuilds the site form
 */
function uc_hosting_products_hosting_site_options_alter (&$settings, $choices) {
  // Add platforms in the current cart to available platforms
  $options = _uc_hosting_products_fetch_cart_options($settings);
  $settings = $options;
}

/**
 * Display the site info in the shopping cart
 */
function uc_hosting_products_product_description_alter(&$description, $product) {
  if ($product->data['site_data']['title']) {
    $description['site_url'] = array(
      '#url' => array(
        '#type' => 'value',
        '#value' => $product->data['site_data']['title'],
      ),
      '#theme' => 'uc_hosting_products_site_info',
      '#weight' => 0,
    );
  }
  return $description;
}

/**
 * Imp of hook_uc_form_alter to get the info we need to create a site
 *
 * This will be called before the form is rendered, allowing us to use other modules
 * to customize the product workflow with hook_form_alter.
 *
 * @param $form
 *   The form object
 * @param $form_state
 *   The form with values and other changes
 * @param $form_id
 *   The unique identifier of the form
 */
function uc_hosting_products_uc_form_alter (&$form, &$form_state, $form_id) {
  $node =& $form['node']['#value'];

  // Determine if the product has the site feature or a product in the product kit has the site feature
  if (_uc_hosting_products_has_site_feature ($node)) {
    // Make sure we go through the purchase/site form 
    $form['#submit'][] = 'uc_hosting_products_site_redirect';
  }
}

/**
 * Redirect function to allow clients to choose to create their site right away
 */
function uc_hosting_products_site_redirect ($form, &$form_state) {
  drupal_goto('purchase/site');
}

/**
 * Implementation of hook_order
 *
 * Actions t$form_state['values']['create_later']o take on order changes involving an aegir product
 *
 * @param $op string
 *   Provided by ubercart on invocation
 * @param &$arg1
 *   Different data depending on the op
 * @param $arg2
 *   Different data depending on the op
 */
function uc_hosting_products_order ($op, &$arg1, $arg2) {
  switch ($op) {
    case 'update':
      if ($arg2 == 'completed') {
        foreach ($arg1->products as $product) {
          if (_uc_hosting_products_has_feature ($product)) {
            // Make the changes necessary to the hosting client
            $client = uc_hosting_update_client($arg1, $product, 'uc_hosting_products_client_update');
          }
        }
      }
      break;
    default:
      break;
  }
}

/**
 * Callback for client updates
 *
 * @param $client
 *   The Aegir client account
 * @param $product
 *   The Ubercart product
 * @param $hosting_order
 *   The data to be written to uc_hosting_orders
 */
function uc_hosting_products_client_update ($client, $product, &$hosting_order) {
  $feature_info = db_fetch_array(db_query('SELECT * FROM {uc_hosting_products} WHERE model = "%s"', $product->model));
  switch ($feature_info['type']) {

    case 'platform':
      db_query('INSERT INTO {hosting_platform_client_access} (pid, cid) VALUES (%d, %d)', $feature_info['value'], $client->nid);
      $hosting_order['order_data']['platform_access'][$feature_info['value']] = $feature_info['value'];
      break;

    case 'sites':
      // Prepare the site data for inclusion in uc_hosting_orders
      $hosting_order['site_url'] = $product->data['site_data']['title'];
      $hosting_order['order_data']['sites'][$hosting_order['site_url']] = $product->data['site_data'];

      // Increment the client's site quota
      $current_limit = db_result(db_query('SELECT value FROM {hosting_client_quota} WHERE client = %d AND resource = "%s"', $client->nid, 'sites'));
      hosting_quota_set_limit($client->nid, 'sites', $current_limit+$product->qty);

      // Create the site, if there is a site url
      $site = (object) $product->data['site_data'];
      if ($site->title) {
        $site->type = 'site';
        $site->status = 1;
        $site->client = $client->nid;
        $site->uid = $client->uid;
        node_save($site);
      }
      drupal_set_message(t('Your site, @url, has been created. You can view it !here.', array(
        '@url' => $site->title,
        '!here' => l('here', "node/{$client->nid}"),
      )));
      break;
    default:
      // TODO Once there are other quota resources to work with
      break;
  }
}

/**
 * Implementation of hook_product_feature().
 */
function uc_hosting_products_product_feature () {
  // Include files for the features
  include_once('inc/uc_hosting_products.platform_feature.inc');
  include_once('inc/uc_hosting_products.site_feature.inc');
  include_once('inc/uc_hosting_products.feature_shared.inc');

  // Set the feature for the platforms
  $features[] = array(
    'id' => 'hosting_platform',
    'title' => t('Access to a platform'),
    'callback' => 'uc_hosting_products_platform_form',
    'delete' => 'uc_hosting_products_feature_delete',
    'settings' => 'uc_hosting_products_platform_settings',
  );
  // This sets the feature for sites
  $features[] = array(
    'id' => 'hosting_site',
    'title' => t('Create a site and adjust quotas accordingly.'),
    'callback' => 'uc_hosting_products_site_form',
    'delete' => 'uc_hosting_products_feature_delete',
    'settings' => 'uc_hosting_products_site_settings'
  );

  return $features;
}

/**
 * Theme function to properly display the site info
 *
 * @param $element
 *   The order element to theme
 */
function theme_uc_hosting_products_site_info($element) {
  $rows = array(
    'url' => $element['#url']['#value'],
  );
  return theme('item_list', $rows);
}

/**
 * Helper function to test for the site feature
 *
 * @param $node
 *   A node object
 */
function _uc_hosting_products_has_site_feature ($node) {
  // Create an array of site product nids
  $nidray = array();
  $result = db_query("SELECT pf.nid FROM {uc_product_features} pf LEFT JOIN {uc_hosting_products} hp ON pf.pfid = hp.pfid WHERE pf.fid = 'hosting_site' AND hp.type = 'sites'");

  while ($row = db_fetch_array($result)) {
    $nidray[] = $row['nid'];
  }

  if (empty($nidray)) {
    return FALSE;
  }

  switch ($node->type) {
    case 'product_kit':
      foreach ($node->products as $product) {
        if (in_array($product->nid, $nidray)) {
          return TRUE;
        }
      }
      break;
    default:
      if (in_array($node->nid, $nidray)) { 
        return TRUE;
      }
      break;
  }
}

/**
 * Helper function to return any platforms currently in the cart
 *
 * @param $platforms
 *   An existing array of platforms to append to
 * @param $cart
 *   An ubercart cart
 */
function _uc_hosting_products_fetch_cart_options ($settings = array(), $cart = NULL) {
  // Create an array of site product nids
  $result = db_query("SELECT pf.nid, hp.value, n.title FROM {uc_product_features} pf LEFT JOIN {uc_hosting_products} hp ON pf.pfid = hp.pfid LEFT JOIN {node} n ON n.nid = hp.value WHERE pf.fid = 'hosting_platform' AND hp.type = 'platform';");

  $platforms = array();

  while ($row = db_fetch_array($result)) {
    if ($row) $platforms[$row['nid']] = $row;
  }

  // No need to go any further if there are no platform accesses to set up
  if (empty($platforms)) {
    return $settings;
  }

  // Fetch the cart if it is not already there
  if (!$cart) {
    $cart = uc_cart_get_contents();
  }

  foreach ($cart as $product) {
    if (array_key_exists($product->nid, $platforms)) {
      $settings['platform'][] = (int) $platforms[$product->nid]['value'];

      // We should do profiles too
      $profiles = hosting_package_instances_load(array(
        'p.package_type' => 'profile',
        'n.status' => 1,
        'r.type' => 'platform',
        'r.nid' => $platforms[$product->nid]['value']));
      foreach ($profiles as $profile) {
        $settings['profile'][] = (int) $profile->nid;
      }

    }
  }

  return $settings;
}


/**
 * Return TRUE if the given product (from an order) has a hosting feature.
 */
function _uc_hosting_products_has_feature ($product) {
  $pfid = db_result(db_query("SELECT pf.pfid FROM {uc_product_features} pf LEFT JOIN {uc_hosting_products} hp ON pf.pfid = hp.pfid WHERE pf.fid LIKE 'hosting_%' AND pf.nid = %d AND (hp.model = '' OR hp.model = '%s')", $product->nid, $product->model));
  return $pfid;
}
