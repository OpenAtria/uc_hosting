<?php
/**
 * @file
 * Schemas, install, and uninstall hooks
 */

/**
 * Imp of hook_schema
 */
function uc_hosting_products_schema () {
  $schema = array();

  $schema['uc_hosting_products'] = array(
    'description' => 'Maps aegir product features to a specific hosting client',
    'fields' => array(
      'hpid' => array(
        'description' => 'IDs the hosting product.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'pfid' => array(
        'description' => 'The {uc_product_features}.pfid.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'model' => array(
        'description' => 'The product model.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'type' => array(
        'description' => 'The feature type, either in the form "quota-resourcename" or the words "platform" or "site".',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
      'value' => array(
        'description' => 'Either the platform nid or the quota value.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ),
      'data' => array(
        'type' => 'text',
        'not null' => FALSE,
        'size' => 'normal',
      ),
    ),
    'primary key' => array('hpid'),
    'indexes' => array(
      'pfid' => array('pfid'),
      'model' => array('model'),
      'value' => array('value'),
    ),
  );

  return $schema;
}

/**
 * Imp of hook_install
 */
function uc_hosting_products_install() {
  drupal_install_schema('uc_hosting_products');

  // Initialize variables
  variable_set('uc_hosting_products_error_state', FALSE);
}

/**
 * Imp of hook_uninstall
 */
function uc_hosting_products_uninstall () {
  // TODO Probably best to remove all the installed features from the ubercart tables also
  drupal_uninstall_schema('uc_hosting_products');

  // Delete any settings variables
  variable_del('uc_hosting_products_error_state');
}

/**
 * Update the values of the data column
 */
function uc_hosting_products_update_6101 (&$sandbox) {

  // Initialize the sandbox to process existing products
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['current_hpid'] = 0;
    $sandbox['max'] = db_result(db_query('SELECT COUNT(DISTINCT hpid) FROM {uc_hosting_products}'));
  }

  // Now add necessary values to existing products data columns
  $platform_products = db_query('SELECT hpid, pfid, type, value FROM {uc_hosting_products} WHERE hpid > %d ORDER BY hpid ASC LIMIT 5', $sandbox['current_hpid']);
  while ($prod = db_fetch_object($platform_products)) {
    if ($prod->type == 'platform') {
      $data = array('platform' => $prod->value);
      db_query('UPDATE {uc_hosting_products} SET data = "%s" WHERE hpid = %d AND pfid = %d', serialize($data), $prod->hpid, $prod->pfid);
    }
    else {
      db_query('UPDATE {uc_hosting_products} SET data = "%s" WHERE hpid = %d AND pfid = %d', serialize(array()), $prod->hpid, $prod->pfid); 
    }
    $sandbox['progress']++;
    $sandbox['current_hpid'] = $prod->hpid;
  }

  if (empty($sandbox['max'])) {
    $ret['#finished'] = 1;
  }
  else if ($sandbox['progress'] >= $sandbox['max']) {
    $ret['#finished'] = 1;
  }
  else {
    $ret['#finished'] = $sandbox['progress'] / $sandbox['max'];
  }

  return $ret;
}

/**
 * Update to add the data column to the database
 */
function uc_hosting_products_update_6100 (&$sandbox) {
  $ret = array();

  db_add_field($ret, 'uc_hosting_products', 'data', array(
    'type' => 'text',
    'not null' => FALSE,
    'size' => 'normal',
  ));

  return $ret;
}


